---
- name: Install the latest version of postfix
  dnf:
    name: postfix
    state: latest

- name: Install the latest version of alpine
  dnf:
    name: alpine
    state: latest

- name: Install the latest version of dovecot
  dnf:
    name: dovecot
    state: latest

- name: Install the latest version of telnet
  dnf:
    name: telnet
    state: latest

- name: Install the latest version of epel-release
  dnf:
    name: epel-release
    state: latest

- name: Install the latest version of dnf-plugins-core
  dnf:
    name: dnf-plugins-core
    state: latest

- name: Install the latest version of make
  dnf:
    name: make
    state: latest

- name: Install ImageMagick
  dnf:
    name: ImageMagick
    # state: latest

- name: Install ImageMagick-devel
  dnf:
    name: ImageMagick-devel
    # state: latest

- name: Install ImageMagick-perl
  dnf:
    name: ImageMagick-perl
    # state: latest

- name: Install the latest version of pcre-devel
  dnf:
    name: pcre-devel
    state: latest

- name: Install the latest version of zlib
  dnf:
    name: zlib
    state: latest

- name: Install the latest version of zlib-devel
  dnf:
    name: zlib-devel
    state: latest

- name: Install the latest version of libzip
  dnf:
    name: libzip
    state: latest

- name: Install the latest version of libzip-devel
  dnf:
    name: libzip-devel
    state: latest

- name: Install the latest version of libmcrypt-devel
  dnf:
    name: libmcrypt-devel
    state: latest

- name: Install the latest version of php
  dnf:
    name: php
    state: latest

- name: Install the latest version of php-fpm
  dnf:
    name: php-fpm
    state: latest

- name: Install the latest version of php-devel
  dnf:
    name: php-devel
    state: latest

- name: Install the latest version of php-pear
  dnf:
    name: php-pear
    state: latest

- name: Install the latest version of php-cli
  dnf:
    name: php-cli
    state: latest

- name: Install the latest version of php-gd
  dnf:
    name: php-gd
    state: latest

- name: Install the latest version of php-curl
  dnf:
    name: php-curl
    state: latest

- name: Install the latest version of php-xml
  dnf:
    name: php-xml
    state: latest

- name: Install the latest version of php-mysqlnd
  dnf:
    name: php-mysqlnd
    state: latest

- name: Install the latest version of php-mbstring
  dnf:
    name: php-mbstring
    state: latest

- name: Install the latest version of php-intl
  dnf:
    name: php-intl
    state: latest

- name: Install the latest version of php-ldap
  dnf:
    name: php-ldap
    state: latest

- name: Install the latest version of mariadb
  dnf:
    name: mariadb
    state: latest

- name: Install the latest version of mariadb-server
  dnf:
    name: mariadb-server
    state: latest

- name: Install the latest version of imagick
  community.general.pear:
    name: pecl/imagick
    state: latest

- name: Install the latest version of mcrypt
  community.general.pear:
    name: pecl/mcrypt
    state: latest

- name: Install the latest version of zip
  community.general.pear:
    name: pecl/zip
    state: latest

- name: Get OpenStack metadata
  uri:
    url: http://169.254.169.254/latest/meta-data/public-ipv4
    method: GET
    status_code: 200
    return_content: yes
  register: cloud_metadata

- name: Create DNS zone file
  template:
    src: zone_file.j2 
    dest: "/etc/named/{{ hostname }}.{{ domain_name }}"
    owner: root
    group: named
    mode: '0644'
  notify:
    - Restart named service
    - Increment serial  

- name: Overwrite main.cf
  template:
    src: main.cf.j2
    dest: /etc/postfix/main.cf
    owner: root
    group: root
    mode: '0644'
  notify: Restart Postfix service

# - name: Add mailuser
#   user:
#     name: mailuser
#     state: present
#     password: "{{ email_password|password_hash('sha256') }}"

- name: Add user mailuser
  user:
    name: "{{ mail_user }}"
    state: present
    password: "{{ email_password | password_hash('sha512') }}"
  no_log: true

- name: Flush handlers
  meta: flush_handlers    

- name: Email nagios@scoring.sa.cs.ut.ee
  become: true
  become_user: mailuser
  shell:
    cmd: 'echo -e "Subject: You Should Hire Bill! \n\nYou should hire Bill at HPC! \nThis e-mail was sent by mailuser using the sendmail command in Bill&apos;s custom-made Postfix installation using his badass Ansible playbook. Hugs and kisses from {{ item }}@{{ item }}!" | sendmail {{ item }}'
  with_items:
    - hostname
    - domain_name
    - email_recipient

- name: Update 10-logging.conf
  copy:
    src: 10-logging.conf
    dest: /etc/dovecot/conf.d/10-logging.conf
    owner: root
    group: root
    mode: '0644'
  notify: Restart Dovecot service

- name: Update dovecot.conf
  copy:
    src: dovecot.conf
    dest: /etc/dovecot/dovecot.conf
    owner: root
    group: root
    mode: '0644'
  notify: Restart Dovecot service    

- name: Update 10-auth.conf
  copy:
    src: 10-auth.conf
    dest: /etc/dovecot/conf.d/10-auth.conf
    owner: root
    group: root
    mode: '0644'
  notify: Restart Dovecot service    

- name: Update 10-mail.conf 
  copy:
    src: 10-mail.conf
    dest: /etc/dovecot/conf.d/10-mail.conf
    owner: root
    group: root
    mode: '0644'
  notify: Restart Dovecot service

- name: Update 10-ssl.conf
  copy:
    src: 10-ssl.conf
    dest: /etc/dovecot/conf.d/10-ssl.conf
    owner: root
    group: root
    mode: '0644'
  notify: Restart Dovecot service 

- name: Update 15-mailboxes.conf
  copy:
    src: 15-mailboxes.conf
    dest: /etc/dovecot/conf.d/15-mailboxes.conf
    owner: root
    group: root
    mode: '0644'
  notify: Restart Dovecot service

- name: Add dovecot user to mail group
  user:
    name: "dovecot"
    group: "mail"
    append: yes

- name: Flush handlers
  meta: flush_handlers

- name: Open port 25/TCP for HTTP
  ansible.posix.firewalld:
    port: 25/tcp
    permanent: yes
    state: enabled
  notify:
    - Reload firewalld service

- name: Open port 25/UDP for HTTP
  ansible.posix.firewalld:
    port: 25/udp
    permanent: yes
    state: enabled
  notify:
    - Reload firewalld service

- name: Open port 143/TCP for HTTP
  ansible.posix.firewalld:
    port: 143/tcp
    permanent: yes
    state: enabled
  notify:
    - Reload firewalld service

- name: Open port 143/UDP for HTTP
  ansible.posix.firewalld:
    port: 143/udp
    permanent: yes
    state: enabled
  notify:
    - Reload firewalld service

# - name: Update 10-master.conf
#   copy:
#     src: 10-master.conf
#     dest: /etc/dovecot/conf.d/10-master.conf
#     owner: root
#     group: root
#     mode: '0644'
#   notify: Restart Dovecot service

# - name: Add mailuser
#   user:
#     name: mailuser
#     state: present
#     password: "{{ email_password|password_hash('sha256') }}"

- name: Update master.cf
  copy:
    src: master.cf
    dest: /etc/postfix/master.cf
    owner: root
    group: root
    mode: '0644'
  notify: Restart Postfix service

- name: dnf config-manager --set-enabled powertools
  dnf:
    enable_plugin: powertools

- name: Create 20-imagick.ini file in /etc/php.d directory
  file:
    path: /etc/php.d/20-imagick.ini
    state: touch
    owner: root
    group: root
    mode: '0755'

- name: Create 20-mcrypt.ini file in /etc/php.d directory
  file:
    path: /etc/php.d/20-mcrypt.ini
    state: touch
    owner: root
    group: root
    mode: '0755'

- name: Create 20-zip.ini file in /etc/php.d directory
  file:
    path: /etc/php.d/20-zip.ini
    state: touch
    owner: root
    group: root
    mode: '0755'

- name: Write the extension into 20-imagick.ini
  lineinfile:
    dest: "/etc/php.d/20-imagick.ini"
    line: "extension=imagick.so"
    state: present
    create: yes
  notify: 
    - Restart mariadb service
    - Restart php-fpm service
    - Restart httpd service

- name: Write the extension into 20-mcrypt.ini
  lineinfile:
    dest: "/etc/php.d/20-mcrypt.ini"
    line: "extension=mcrypt.so"
    state: present
    create: yes
  notify: 
    - Restart mariadb service
    - Restart php-fpm service
    - Restart httpd service

- name: Write the extension into 20-zip.ini
  lineinfile:
    dest: "/etc/php.d/20-zip.ini"
    line: "extension=zip.so"
    state: present
    create: yes
  notify: 
    - Restart mariadb service
    - Restart php-fpm service
    - Restart httpd service

- name: Create roundcubemail database
  mysql_db:
    name: roundcubemail
    state: present
    login_password: '{{ mysql_root_password }}'

- name: Create roundcube user 
  # mysql_user:
  #   name: roundcube
  #   password: "{{ email_password|password_hash('sha512') }}"
  #   login_password: '{{ mysql_root_password }}'
  #   priv: 'roundcubemail.*:ALL'
  #   host: localhost
  mysql_user:
    name: roundcube
    password: '{{ email_password }}'
    login_password: '{{ mysql_root_password }}'
    priv: 'roundcubemail.*:ALL'
    host: localhost
  no_log: true  
  
- name: Download the Roundcube release
  get_url:
    url: https://github.com/roundcube/roundcubemail/releases/download/1.4.11/roundcubemail-1.4.11-complete.tar.gz
    dest: /tmp/roundcube.tar.gz
    mode: '0440'
  
- name: Unzip Roundcube
  unarchive:
    src: /tmp/roundcube.tar.gz
    remote_src: yes
    dest: /tmp
    owner: apache
    group: apache

- name: Copy Roundcube to /var/www/html/roundcube
  copy:
    src: /tmp/roundcubemail-1.4.11/
    remote_src: yes
    directory_mode: yes
    dest: /var/www/html/roundcubemail
    owner: apache
    group: apache
    mode: '0755'

- name: sefcontext httpd_sys_rw_content_t
  sefcontext:
    target: '/var/www/html/roundcubemail'
    setype: httpd_sys_rw_content_t
    state: present

- name: Create a web server configuration for Roundcube
  template:
    src: roundcube_web_server_config.j2
    dest: /etc/httpd/conf.d/mail.{{ hostname }}.conf
    owner: apache
    group: apache
    mode: '0644'
  notify: 
    - Restart httpd service  
    - Restart php-fpm service

- name: Create Roundcube PHP config file
  template:
    src: config.inc.php.j2
    dest: /var/www/html/roundcubemail/config/config.inc.php
    owner: apache
    group: apache
    mode: '0644'
  notify:
    - Restart httpd service  
    - Restart php-fpm service

- name: Seed Roundcubemail database
  mysql_db:
    name: roundcubemail
    state: import
    login_password: '{{ mysql_root_password }}'
    target: /var/www/html/roundcubemail/SQL/mysql.initial.sql
  ignore_errors: true 